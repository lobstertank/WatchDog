name: Test WatchDog

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      FINOLOG_API_KEY: ${{ secrets.FINOLOG_API_KEY || 'test_api_key' }}
      FINOLOG_BIZ_ID: ${{ secrets.FINOLOG_BIZ_ID || 'test_biz_id' }}
      THREATENING_ACCOUNT_IDS: ${{ secrets.THREATENING_ACCOUNT_IDS || '123,456' }}
      MAIN_BOT_TOKEN: ${{ secrets.MAIN_BOT_TOKEN || 'test_main_token' }}
      MAIN_BOT_ALLOWED_USERS: ${{ secrets.MAIN_BOT_ALLOWED_USERS || '123456789' }}
      TEST_BOT_TOKEN: ${{ secrets.TEST_BOT_TOKEN || 'test_test_token' }}
      TEST_BOT_ALLOWED_USERS: ${{ secrets.TEST_BOT_ALLOWED_USERS || '123456789' }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Test imports
      run: |
        python -c "
        try:
            from api_functions import get_all_accounts, get_current_balances
            from telegram_functions import send_telegram_message
            from telegram_bot import main
            from config import FINOLOG_CONFIG, THREATENING_CONFIG
            from contacts import MAIN_BOT_CONFIG, TEST_BOT_CONFIG
            print('‚úÖ All imports successful')
        except ImportError as e:
            print(f'‚ùå Import error: {e}')
            exit(1)
        "
        
    - name: Test configuration
      run: |
        python -c "
        from config import FINOLOG_CONFIG, THREATENING_CONFIG
        from contacts import MAIN_BOT_CONFIG, TEST_BOT_CONFIG
        
        # Check required config keys
        required_finolog = ['api_key', 'biz_id', 'base_url']
        required_threatening = ['account_ids', 'threshold', 'days_ahead']
        required_bot = ['bot_token', 'allowed_users']
        
        for key in required_finolog:
            assert key in FINOLOG_CONFIG, f'Missing FINOLOG_CONFIG.{key}'
            
        for key in required_threatening:
            assert key in THREATENING_CONFIG, f'Missing THREATENING_CONFIG.{key}'
            
        for key in required_bot:
            assert key in MAIN_BOT_CONFIG, f'Missing MAIN_BOT_CONFIG.{key}'
            assert key in TEST_BOT_CONFIG, f'Missing TEST_BOT_CONFIG.{key}'
            
        print('‚úÖ Configuration validation passed')
        "        
    - name: Test file structure
      run: |
        echo "=== Required files check ==="
        required_files=(
            "launcher.py"
            "launcher_test.py" 
            "telegram_bot.py"
            "api_functions.py"
            "telegram_functions.py"
            "config.py"
            "contacts.py"
            "holiday_checker_json.py"
            "holiday_updater_minimal.py"
            "holidays_2025.json"
            "holidays_2026.json"
            "requirements.txt"
            "run_bot.sh"
            "run_holiday_updater.sh"
        )
        
        for file in "${required_files[@]}"; do
            if [ -f "$file" ]; then
                echo "‚úÖ $file"
            else
                echo "‚ùå Missing: $file"
                exit 1
            fi
        done
        
    - name: Test script permissions (simulation)
      run: |
        echo "=== Script permissions check ==="
        scripts=("run_bot.sh" "run_holiday_updater.sh" "run_bot_with_holidays.sh")
        for script in "${scripts[@]}"; do
            if [ -f "$script" ]; then
                echo "‚úÖ $script exists"
            else
                echo "‚ùå Missing: $script"
                exit 1
            fi
        done
        
    - name: Test documentation
      run: |
        echo "=== Documentation check ==="
        docs=("PRODUCT_DOCUMENTATION.md" "DEPLOYMENT_PROCESS.md" "QUICK_REFERENCE.md")
        for doc in "${docs[@]}"; do
            if [ -f "$doc" ]; then
                echo "‚úÖ $doc"
            else
                echo "‚ö†Ô∏è  $doc not found"
            fi
        done
        
    - name: Test summary
      run: |
        echo "üß™ WatchDog tests completed successfully!"
        echo "üìã All imports working"
        echo "‚öôÔ∏è  Configuration valid"
        echo "üìÅ File structure correct"
        echo "üìö Documentation present"

