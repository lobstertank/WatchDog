#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API Finolog –∏ —Ä–∞—Å—á–µ—Ç–æ–≤
"""

import urllib.request
import urllib.parse
import json
import time
from datetime import datetime, timedelta
from config import FINOLOG_CONFIG, THREATENING_CONFIG

def make_request(url, timeout=30):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å API –∑–∞–ø—Ä–æ—Å –∫ Finolog —Å —Ç–∞–π–º–∞—É—Ç–æ–º"""
    # –ü–∞—É–∑–∞ 3 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
    #time.sleep(1)
    
    try:
        req = urllib.request.Request(url)
        req.add_header('Api-Token', FINOLOG_CONFIG['api_key'])
        
        with urllib.request.urlopen(req, timeout=timeout) as response:
            return json.loads(response.read().decode('utf-8'))
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ API –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return None


def get_all_transactions_for_all_accounts(account_ids, start_date):
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å—á–µ—Ç–æ–≤ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º"""
    # –î–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –Ω–∞ –≥–æ–¥ –≤–ø–µ—Ä–µ–¥ –æ—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
    try:
        start_dt = datetime.strptime(str(start_date), "%Y-%m-%d")
    except ValueError as exc:
        raise ValueError("start_date must be in 'YYYY-MM-DD' format") from exc

    start_dt_in_past = start_dt - timedelta(days=365)
    start_date_in_past = start_dt_in_past.strftime("%Y-%m-%d")
    end_dt = start_dt + timedelta(days=365)
    end_date = end_dt.strftime("%Y-%m-%d")
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º ID —Å—á–µ—Ç–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
    account_ids_str = ','.join(map(str, account_ids))
    
    all_transactions = []
    page = 1
    pagesize = 200  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    
    while True:
        # –ó–∞–ø—Ä–æ—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –≤—Å–µ—Ö —Å—á–µ—Ç–æ–≤ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
        url = f"{FINOLOG_CONFIG['base_url']}/biz/{FINOLOG_CONFIG['biz_id']}/transaction?account_ids={account_ids_str}&date={start_date_in_past}%2C{end_date}&status=planned&with_splitted=false&without_closed_accounts=false&page={page}&pagesize={pagesize}"
        
        page_transactions = make_request(url)
        
        if not page_transactions:
            break
            
        all_transactions.extend(page_transactions)
        
        # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –º–µ–Ω—å—à–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —á–µ–º pagesize, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        if len(page_transactions) < pagesize:
            break
            
        page += 1
    
    if not all_transactions:
        return {}
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ —Ç–∏–ø—É –æ–ø–µ—Ä–∞—Ü–∏–∏
    filtered_transactions = []
    for tx in all_transactions:
        is_splitted = tx.get('is_splitted', False)
        split_id = tx.get('split_id')
        
        # –í–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ:
        # 1. –ù–µ—Ä–∞–∑–±–∏—Ç—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ (split_id = null, is_splitted = false)
        # 2. –°—É–º–º–∏—Ä—É—é—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ (is_splitted = true)
        # –ò—Å–∫–ª—é—á–∞–µ–º —á–∞—Å—Ç–∏ —Ä–∞–∑–±–∏—Ç—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π (split_id ‚â† null, is_splitted = false)
        if (split_id is None and not is_splitted) or is_splitted:
            filtered_transactions.append(tx)
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ —Å—á–µ—Ç–∞–º
    transactions_by_account = {}
    for tx in filtered_transactions:
        account_id = tx.get('account_id')
        if account_id not in transactions_by_account:
            transactions_by_account[account_id] = []
        transactions_by_account[account_id].append(tx)
    
    return transactions_by_account

def get_all_accounts():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å—á–µ—Ç–æ–≤"""
    url = f"{FINOLOG_CONFIG['base_url']}/biz/{FINOLOG_CONFIG['biz_id']}/account"
    return make_request(url, timeout=30)

def get_current_balances(accounts):
    """
    –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –æ—Å—Ç–∞—Ç–∫–∏ –ø–æ —Å–ø–∏—Å–∫—É —Å—á–µ—Ç–æ–≤.
    –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ summary –≤ accounts.
    """
    balances = {}
    
    for account in accounts:
        account_id = account.get('id')
        account_name = account.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –∏–∑ summary (–≤—Å–µ–≥–¥–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏)
        balance = 0
        if account.get('summary'):
            if isinstance(account['summary'], list):
                balance = account['summary'][0].get('balance', 0)
            else:
                balance = account['summary'].get('balance', 0)
        
        balances[account_id] = {
            'name': account_name,
            'balance': balance
        }
    
    return balances

def calculate_daily_balances(current_balance, planned_transactions, start_date, days_ahead=365):
    """
    –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤–ø–µ—Ä–µ–¥.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö API –≤—ã–∑–æ–≤–æ–≤.
    
    Args:
        current_balance: —Ç–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫ —Å—á–µ—Ç–∞
        planned_transactions: —Å–ø–∏—Å–æ–∫ –ø–ª–∞–Ω–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (—É–∂–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥—Ä—É–≥–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π)
        start_date: –Ω–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "YYYY-MM-DD"
        days_ahead: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 365)
    
    Returns:
        dict: —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞—Ç–∞–º–∏ –∏ –æ—Å—Ç–∞—Ç–∫–∞–º–∏ {date: balance}
    """
    from datetime import datetime, timedelta
    
    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ –¥–∞—Ç–∞–º
    transactions_by_date = {}
    for tx in planned_transactions:
        tx_date = tx.get('date', '')
        if tx_date:
            if tx_date not in transactions_by_date:
                transactions_by_date[tx_date] = []
            transactions_by_date[tx_date].append(tx)
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏ –ø–æ –¥–Ω—è–º
    daily_balances = {}
    running_balance = current_balance
    
    # –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞
    start_dt = datetime.strptime(start_date, "%Y-%m-%d")
    
    for day_offset in range(days_ahead + 1):
        current_dt = start_dt + timedelta(days=day_offset)
        current_date_str = current_dt.strftime("%Y-%m-%d 00:00:00")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å
        if current_date_str in transactions_by_date:
            for tx in transactions_by_date[current_date_str]:
                value = tx.get('value', 0)
                tx_type = tx.get('type', '')
                if tx_type == 'in':
                    running_balance += value
                elif tx_type == 'out':
                    running_balance += value  # value —É–∂–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –¥–ª—è –∏—Å—Ö–æ–¥—è—â–∏—Ö
        
        daily_balances[current_date_str] = running_balance
    
    return daily_balances

def analyze_all_accounts_balances(transactions_by_account, accounts, current_balances):
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ —Å—á–µ—Ç–∞ –Ω–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∏ —É–≥—Ä–æ–∂–∞—é—â–∏–µ –æ—Å—Ç–∞—Ç–∫–∏
    
    Args:
        transactions_by_account: —Å–ª–æ–≤–∞—Ä—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ —Å—á–µ—Ç–∞–º
        accounts: —Å–ø–∏—Å–æ–∫ —Å—á–µ—Ç–æ–≤
        current_balances: —Å–ª–æ–≤–∞—Ä—å —Ç–µ–∫—É—â–∏—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤ –ø–æ —Å—á–µ—Ç–∞–º
    
    Returns:
        dict: {
            'negative_balances': {account_id: [(date, balance), ...]},
            'threatening_balances': {account_id: [(date, balance), ...]},
            'accounts_info': {account_id: {'name': str, 'current_balance': float}}
        }
    """
    print("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ —Å—á–µ—Ç–∞ –Ω–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∏ —É–≥—Ä–æ–∂–∞—é—â–∏–µ –æ—Å—Ç–∞—Ç–∫–∏...")
    
    if not accounts:
        print("–û—à–∏–±–∫–∞: —Å–ø–∏—Å–æ–∫ —Å—á–µ—Ç–æ–≤ –ø—É—Å—Ç")
        return {'negative_balances': {}, 'threatening_balances': {}, 'accounts_info': {}}
    
    # –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞
    current_date = datetime.now().strftime("%Y-%m-%d")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
    threatening_account_ids = THREATENING_CONFIG['account_ids']
    threatening_threshold = THREATENING_CONFIG['threshold']
    days_ahead = THREATENING_CONFIG['days_ahead']
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
    negative_balances = {}
    threatening_balances = {}
    accounts_info = {}
    
    # –ê–Ω–∞–ª–∏–∑ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—á–µ—Ç–∞
    for account in accounts:
        account_id = account.get('id')
        account_name = account.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        
        # –¢–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫
        current_balance = current_balances[account_id]['balance']
        accounts_info[account_id] = {
            'name': account_name,
            'current_balance': current_balance
        }
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ 
        account_id_int = int(account_id)
        if transactions_by_account and account_id_int in transactions_by_account:
            year_transactions = transactions_by_account[account_id_int]
        else:
            # –ü–æ —ç—Ç–æ–º—É —Å—á–µ—Ç—É –Ω–µ –±—ã–ª–æ –¥–≤–∏–∂–µ–Ω–∏–π - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
            year_transactions = []
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏
        daily_balances = calculate_daily_balances(
            current_balance=current_balance,
            planned_transactions=year_transactions,
            start_date=current_date,
            days_ahead=days_ahead
        )
        
        # –ò—â–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –¥–Ω–∏ (balance < 0)
        negative_days = []
        for date_str, balance in daily_balances.items():
            if balance < 0:
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –≤—ã–≤–æ–¥–∞
                date_obj = datetime.strptime(date_str, "%Y-%m-%d 00:00:00")
                formatted_date = date_obj.strftime("%Y-%m-%d")
                negative_days.append((formatted_date, balance))
        
        if negative_days:
            negative_balances[account_id] = negative_days
            print(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏ –≤ {account_name}: {len(negative_days)} –¥–Ω–µ–π")
        
        # –ò—â–µ–º —É–≥—Ä–æ–∂–∞—é—â–∏–µ –¥–Ω–∏ (0 < balance < threshold) –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Å—á–µ—Ç–æ–≤
        if account_id in threatening_account_ids:
            threatening_days = []
            for date_str, balance in daily_balances.items():
                if 0 < balance < threatening_threshold:
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –≤—ã–≤–æ–¥–∞
                    date_obj = datetime.strptime(date_str, "%Y-%m-%d 00:00:00")
                    formatted_date = date_obj.strftime("%Y-%m-%d")
                    threatening_days.append((formatted_date, balance))
            
            if threatening_days:
                threatening_balances[account_id] = threatening_days
                print(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã —É–≥—Ä–æ–∂–∞—é—â–∏–µ –æ—Å—Ç–∞—Ç–∫–∏ –≤ {account_name}: {len(threatening_days)} –¥–Ω–µ–π")
    
    print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω: {len(negative_balances)} —Å—á–µ—Ç–æ–≤ —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º–∏ –æ—Å—Ç–∞—Ç–∫–∞–º–∏, {len(threatening_balances)} —Å—á–µ—Ç–æ–≤ —Å —É–≥—Ä–æ–∂–∞—é—â–∏–º–∏ –æ—Å—Ç–∞—Ç–∫–∞–º–∏")
    
    return {
        'negative_balances': negative_balances,
        'threatening_balances': threatening_balances,
        'accounts_info': accounts_info
    }
