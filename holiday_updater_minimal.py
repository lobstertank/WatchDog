#!/usr/bin/env python3
"""
–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±–Ω–æ–≤–ª—è—Ç–æ—Ä –∫–∞–ª–µ–Ω–¥–∞—Ä—è –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤
–¢–æ–ª—å–∫–æ: –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–ü–ª—é—Å, –ø–∞—Ä—Å–∏–Ω–≥, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ JSON
"""

import datetime
import urllib.request
import json
import re

def get_consultant_html(year):
    """–ü–æ–ª—É—á–∏—Ç—å HTML —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–∞–ª–µ–Ω–¥–∞—Ä—è —Å –ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–ü–ª—é—Å"""
    try:
        url = f"https://www.consultant.ru/law/ref/calendar/proizvodstvennye/{year}/"
        req = urllib.request.Request(url)
        req.add_header('User-Agent', 'WatchDog Holiday Updater')
        
        with urllib.request.urlopen(req, timeout=10) as response:
            if response.getcode() == 200:
                html_content = response.read().decode('utf-8')
                print(f"‚úÖ –ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–ü–ª—é—Å {year}: HTML –ø–æ–ª—É—á–µ–Ω ({len(html_content)} —Å–∏–º–≤–æ–ª–æ–≤)")
                return html_content
            else:
                print(f"‚ùå –ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–ü–ª—é—Å {year}: HTTP {response.getcode()}")
                return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è HTML {year}: {e}")
        return None

def parse_consultant_html(html_content, year):
    """–ü–∞—Ä—Å–∏–Ω–≥ HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–ü–ª—é—Å –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤"""
    holidays = []
    working_days = []
    
    # –ò—â–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–Ω–µ–π
    transfer_pattern = r'—Å\s+(\w+)\s+(\d+)\s+(\w+)\s+–Ω–∞\s+(\w+)\s+(\d+)\s+(\w+)'
    transfers = re.findall(transfer_pattern, html_content)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã
    for transfer in transfers:
        try:
            from_day = int(transfer[1])
            from_month = get_month_number(transfer[2])
            to_day = int(transfer[4])
            to_month = get_month_number(transfer[5])
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å (–∫—É–¥–∞ –ø–µ—Ä–µ–Ω–µ—Å–ª–∏)
            to_date = datetime.date(year, to_month, to_day)
            working_days.append(to_date.strftime('%Y-%m-%d'))
            
            print(f"üìÖ –ü–µ—Ä–µ–Ω–æ—Å: {from_day}.{from_month} ‚Üí {to_day}.{to_month}")
        except:
            continue
    
    # –ò—â–µ–º –ø—Ä–∞–∑–¥–Ω–∏–∫–∏ –≤ —Ç–µ–∫—Å—Ç–µ
    holiday_patterns = [
        (r'(\d+)\s+—è–Ω–≤–∞—Ä—è.*?–ù–æ–≤—ã–π –≥–æ–¥', 1, "–ù–æ–≤—ã–π –≥–æ–¥"),
        (r'(\d+)\s+—è–Ω–≤–∞—Ä—è.*?–†–æ–∂–¥–µ—Å—Ç–≤–æ', 1, "–†–æ–∂–¥–µ—Å—Ç–≤–æ –•—Ä–∏—Å—Ç–æ–≤–æ"),
        (r'(\d+)\s+—Ñ–µ–≤—Ä–∞–ª—è.*?–∑–∞—â–∏—Ç–Ω–∏–∫–∞ –û—Ç–µ—á–µ—Å—Ç–≤–∞', 2, "–î–µ–Ω—å –∑–∞—â–∏—Ç–Ω–∏–∫–∞ –û—Ç–µ—á–µ—Å—Ç–≤–∞"),
        (r'(\d+)\s+–º–∞—Ä—Ç–∞.*?–∂–µ–Ω—Å–∫–∏–π –¥–µ–Ω—å', 3, "–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π –∂–µ–Ω—Å–∫–∏–π –¥–µ–Ω—å"),
        (r'(\d+)\s+–º–∞—è.*?–í–µ—Å–Ω—ã –∏ –¢—Ä—É–¥–∞', 5, "–ü—Ä–∞–∑–¥–Ω–∏–∫ –í–µ—Å–Ω—ã –∏ –¢—Ä—É–¥–∞"),
        (r'(\d+)\s+–º–∞—è.*?–ü–æ–±–µ–¥—ã', 5, "–î–µ–Ω—å –ü–æ–±–µ–¥—ã"),
        (r'(\d+)\s+–∏—é–Ω—è.*?–†–æ—Å—Å–∏–∏', 6, "–î–µ–Ω—å –†–æ—Å—Å–∏–∏"),
        (r'(\d+)\s+–Ω–æ—è–±—Ä—è.*?–Ω–∞—Ä–æ–¥–Ω–æ–≥–æ –µ–¥–∏–Ω—Å—Ç–≤–∞', 11, "–î–µ–Ω—å –Ω–∞—Ä–æ–¥–Ω–æ–≥–æ –µ–¥–∏–Ω—Å—Ç–≤–∞"),
    ]
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–∞–∑–¥–Ω–∏–∫–∏
    for pattern, month, name in holiday_patterns:
        matches = re.findall(pattern, html_content, re.IGNORECASE)
        for match in matches:
            try:
                day = int(match)
                date_obj = datetime.date(year, month, day)
                holidays.append({
                    'date': date_obj.strftime('%Y-%m-%d'),
                    'name': name
                })
                print(f"üéâ –ù–∞–π–¥–µ–Ω –ø—Ä–∞–∑–¥–Ω–∏–∫: {day}.{month} - {name}")
            except ValueError:
                continue
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ–¥–Ω–∏–µ –∫–∞–Ω–∏–∫—É–ª—ã (–æ–±—ã—á–Ω–æ 1-8 —è–Ω–≤–∞—Ä—è)
    for day in range(1, 9):
        try:
            date_obj = datetime.date(year, 1, day)
            if day == 1:
                name = "–ù–æ–≤—ã–π –≥–æ–¥"
            elif day == 7:
                name = "–†–æ–∂–¥–µ—Å—Ç–≤–æ –•—Ä–∏—Å—Ç–æ–≤–æ"
            else:
                name = "–ù–æ–≤–æ–≥–æ–¥–Ω–∏–µ –∫–∞–Ω–∏–∫—É–ª—ã"
            
            holidays.append({
                'date': date_obj.strftime('%Y-%m-%d'),
                'name': name
            })
        except ValueError:
            continue
    
    return {
        "year": year,
        "source": "–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–ü–ª—é—Å (–ø–∞—Ä—Å–∏–Ω–≥ HTML)",
        "last_updated": datetime.datetime.now().isoformat(),
        "holidays": holidays,
        "working_days": working_days
    }

def get_month_number(month_name):
    """–ü–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä –º–µ—Å—è—Ü–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"""
    months = {
        '—è–Ω–≤–∞—Ä—è': 1, '—Ñ–µ–≤—Ä–∞–ª—è': 2, '–º–∞—Ä—Ç–∞': 3, '–∞–ø—Ä–µ–ª—è': 4,
        '–º–∞—è': 5, '–∏—é–Ω—è': 6, '–∏—é–ª—è': 7, '–∞–≤–≥—É—Å—Ç–∞': 8,
        '—Å–µ–Ω—Ç—è–±—Ä—è': 9, '–æ–∫—Ç—è–±—Ä—è': 10, '–Ω–æ—è–±—Ä—è': 11, '–¥–µ–∫–∞–±—Ä—è': 12
    }
    return months.get(month_name.lower(), 1)

def save_holidays_json(year, holidays_data):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞—Ö –≤ JSON —Ñ–∞–π–ª"""
    filename = f"holidays_{year}.json"
    
    try:
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(holidays_data, f, ensure_ascii=False, indent=2)
        
        print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
        return filename
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è {filename}: {e}")
        return None

def update_holidays_for_year(year):
    """–û–±–Ω–æ–≤–∏—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤ –¥–ª—è –≥–æ–¥–∞"""
    print(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ {year}...")
    
    # –ü–æ–ª—É—á–∞–µ–º HTML —Å –ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–ü–ª—é—Å
    html_content = get_consultant_html(year)
    if not html_content:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {year}")
        return None
    
    # –ü–∞—Ä—Å–∏–º HTML
    holidays_data = parse_consultant_html(html_content, year)
    if not holidays_data or not holidays_data.get('holidays'):
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {year}")
        return None
    
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(holidays_data['holidays'])} –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤, {len(holidays_data['working_days'])} –ø–µ—Ä–µ–Ω–æ—Å–æ–≤")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON
    filename = save_holidays_json(year, holidays_data)
    return filename

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
    print("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤")
    print("="*50)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä–∏
    years_to_update = [2025, 2026]
    updated_years = []
    
    for year in years_to_update:
        try:
            filename = update_holidays_for_year(year)
            if filename:
                updated_years.append(year)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ {year}: {e}")
    
    print(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {updated_years}")

if __name__ == "__main__":
    main()
